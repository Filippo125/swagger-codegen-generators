{{>partial_header}}
package {{packageName}}

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route


func Index(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "Hello World!")
}

func NewRouter({{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#hasMore}}imp{{classname}} {{classname}}, {{/hasMore}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
    var routes = Routes{
    Route{
    "Index",
    "GET",
    "{{{basePathWithoutHost}}}/",
    Index,
    },{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}

        Route{
        "{{operationId}}",
        strings.ToUpper("{{httpMethod}}"),
        "{{{basePathWithoutHost}}}{{{path}}}",
        {{operationId}}Handler(imp{{classname}}),
        },{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
    }
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}



